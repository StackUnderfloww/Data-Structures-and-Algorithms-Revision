import java.util.*;

class Main {
    public static List<String> topKWordsInFileContent(String p, int k) {
        String[] words = p.split(" ");
        HashMap<String, Integer> wordFreqMap = new HashMap<>();

        for (String word : words) {
            wordFreqMap.put(word, wordFreqMap.getOrDefault(word, 0) + 1);
        }

        // Min-heap based on word frequency
        PriorityQueue<String> pq = new PriorityQueue<>(new Comparator<String>() {
            public int compare(String ob1, String ob2) {
                return wordFreqMap.get(ob1) - wordFreqMap.get(ob2); // Min heap
            }
        });

        for (String key : wordFreqMap.keySet()) {
            pq.add(key);
            if (pq.size() > k) { // Ensure heap has at most k elements
                pq.poll();
            }
        }

        // Extract k most frequent words and reverse the order (since it's a min-heap)
        List<String> result = new ArrayList<>();
        while (!pq.isEmpty()) {
            result.add(pq.poll());
        }
        Collections.reverse(result); // Ensure highest frequency words appear first

        return result;
    }

    public static void main(String[] args) {
        String p = "the the a b the b b a a";
        List<String> words = topKWordsInFileContent(p, 2);
        for (String str : words) {
            System.out.println(str);
        }
    }
}

class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        if (k == nums.length) {
            return nums;
        }
        int[] ans=new int[k];
        HashMap<Integer,Integer> map=new HashMap<>();
        PriorityQueue<Integer> pq=new PriorityQueue<>((n1, n2) ->   map.get(n1)-map.get(n2));
        
        int i=0;
        while(i<=nums.length-1){
            map.put(nums[i],map.getOrDefault(nums[i],0)+1);
            i++;
        }
        for(Integer key:map.keySet()){
            pq.add(key);
            if(pq.size()>k){
                pq.poll();
            }
        }
        for(i=0;i<k;++i){
            ans[i]=pq.poll();
        }
        return ans;
    }
}
